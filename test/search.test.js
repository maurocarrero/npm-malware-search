const assert = require('assert');
const search = require('../src/search');

const getAllDeps = search.getAllDependencies;
const searchForPkgs = search.searchForPackages;

const DEPS_JSON = {
  someOtherProps: 'nothing important',
  123: false,
  dependencies: {
    'one': 'one_path',
    'two': 'second_path'
  }
}

const DEV_DEPS_JSON = {
  nope: 'Nothing here either',
  someOtherProps: 'nothing important',
  123: false,
  devDependencies: {
    'three': 'three_path',
    'four': 'four_path'
  },
  nadita: Math.PI
}

const BOTH_JSON = Object.assign({}, DEPS_JSON, DEV_DEPS_JSON)

describe('search', function () {
  describe('getAllDependencies', function () {
    it('it should return the list of dependencies', function () {
      assert.deepEqual(getAllDeps(DEPS_JSON), { one: 'one_path', two: 'second_path' })
    });
    it('it should return the list of dev dependencies', function () {
      assert.deepEqual(getAllDeps(DEV_DEPS_JSON), { three: 'three_path', four: 'four_path' })
    });
    it('it should return both lists, deps and devDeps', function () {
      assert.deepEqual(getAllDeps(BOTH_JSON), {
        one: 'one_path',
        two: 'second_path',
        three: 'three_path',
        four: 'four_path'
      });
    });
    it('it should not fail when an empty object is provided', function () {
      assert.deepEqual(getAllDeps({}), {});
    });
    it('it should not fail when no arguments', function () {
      assert.deepEqual(getAllDeps(), false);
    });
    it('it should not fail when the arguments is an array', function () {
      assert.deepEqual(getAllDeps([]), false);
    });
    it('it should return false when the argument is a number', function () {
      assert.deepEqual(getAllDeps(123), false);
    });
    it('it should return false when the argument is a boolean', function () {
      assert.deepEqual(getAllDeps(false), false);
      assert.deepEqual(getAllDeps(true), false);
    });
    it('it should return false when the argument is a string', function () {
      assert.deepEqual(getAllDeps('Peteco was here!'), false);
    });
  });
  describe('searchForPkgs', function () {
    const PKGS = {
      'one': 'one_path',
      'two': 'second_path',
      'three': 'three_path',
      'four': 'four_path'
    };
    const MYSTERIOUS_PKG_ONE = 'crossenv';
    const MYSTERIOUS_PKG_TWO = 'cross-env.js';

    it('it should not find any mysterious package', function () {
      assert.deepEqual(searchForPkgs(BOTH_JSON), [])
    });
    it('it should find crossenv', function () {
      const INPUT = { ...PKGS, [MYSTERIOUS_PKG_ONE]: 'really bad' };
      assert.deepEqual(searchForPkgs(INPUT), [MYSTERIOUS_PKG_ONE])
    });
    it('it should find crossenv', function () {
      const INPUT = { ...PKGS, [MYSTERIOUS_PKG_ONE]: 'really bad', [MYSTERIOUS_PKG_TWO]: 'Also malo, malito' };
      assert.deepEqual(searchForPkgs(INPUT), [MYSTERIOUS_PKG_ONE, MYSTERIOUS_PKG_TWO])
    });
    it('it should not fail when an empty object is provided', function () {
      assert.deepEqual(searchForPkgs({}), {});
    });
    it('it should not fail when no arguments', function () {
      assert.deepEqual(searchForPkgs(), false);
    });
    it('it should not fail when the arguments is an array', function () {
      assert.deepEqual(searchForPkgs([]), false);
    });
    it('it should return false when the argument is a number', function () {
      assert.deepEqual(searchForPkgs(123), false);
    });
    it('it should return false when the argument is a boolean', function () {
      assert.deepEqual(searchForPkgs(false), false);
      assert.deepEqual(searchForPkgs(true), false);
    });
    it('it should return false when the argument is a string', function () {
      assert.deepEqual(searchForPkgs('Peteco was here!'), false);
    });
  })
});
